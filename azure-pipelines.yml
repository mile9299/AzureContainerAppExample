trigger:
  - main  # Adjust to your branch

pool:
  vmImage: 'ubuntu-latest'  # Runs on an Ubuntu agent

variables:
  # - template: variables/variables.yaml
  - group: "ACA_VARIABLES" # specific to Azure DevOps

steps: 
  - task: AzureCLI@2
    displayName: 'Azure Login'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Logging into Azure..."
        az login --service-principal --username "$(APP_ID)" --password "$(CLIENT_SECRET)" --tenant "$(TENANT_ID)"

  - script: | # Docker Login
      echo "Logging into Azure Container Registry..."
      docker login "$(ACR_NAME)" -u "$(ACR_USERNAME)" -p "$(ACR_PASSWORD)"
    displayName: 'Docker Login to Azure Container Registry'

  - script: | # Downloading latest Falcon Container Sensor
      echo "Fetching latest Falcon container sensor..."
      export FALCON_CLIENT_ID="$(FALCON_CLIENT_ID)"
      export FALCON_CLIENT_SECRET="$(FALCON_CLIENT_SECRET)" 
      LATESTSENSOR=$(bash <(curl -Ls https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh) \
        -u "$(FALCON_CLIENT_ID)" \
        -s "$(FALCON_CLIENT_SECRET)" \
        --platform x86_64 \
        --region us-1 \
        --type falcon-container | tail -1)

      echo "Tagging and pushing sensor image..."
      docker tag "$LATESTSENSOR" "$(MY_REPO):latest"
      docker push "$(MY_REPO):latest"
    displayName: 'Pull, Tag, and Push Falcon Sensor'

  - task: Docker@2
    inputs:
      command: build
      Dockerfile: '**/Dockerfile'  # Path to your Dockerfile
    displayName: 'Build, Patching, and Pushing Patched App with Falcon Sensor'

  - task: AzureCLI@2
    displayName: 'Deploy to Azure Container Apps'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Checking if container app $(CONTAINER_APP_NAME) exists..."

        if az containerapp show --name "$(CONTAINER_APP_NAME)" --resource-group "$(RESOURCE_GROUP)" &>/dev/null; then
          echo "Container app exists. Updating..."
          az containerapp update \
            --name "$(CONTAINER_APP_NAME)" \
            --resource-group "$(RESOURCE_GROUP)" \
            --image "$(TARGET_IMAGE)"
        else
          echo "Container app does not exist. Creating a new one..."
          az containerapp create \
            --name "$(CONTAINER_APP_NAME)" \
            --resource-group "$(RESOURCE_GROUP)" \
            --image "$(TARGET_IMAGE)" \
            --environment "$(CONTAINER_ENVIRONMENT)" \
            --ingress external \
            --target-port 8080 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --registry-server "$(ACR_NAME)" \
            --registry-username "$(ACR_USERNAME)" \
            --registry-password "$(ACR_PASSWORD)"
        fi
